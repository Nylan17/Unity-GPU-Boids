#pragma kernel CSMain
#define GROUP_SIZE 256
#define MAX_VELOCITY_ANIMATION_SPEED 12
#define MAX_RANGE_BOID_AFFECTED_FROM_AFFECTOR_FROM_FLOCK 20
#define SCALE_FACTOR 1000000
#define MAX_FLOCK_DISTANCE 50.0
#define VELOCITY_MULTIPLIER 200.0

#include "UnityCG.cginc"

float hash(float n)
{
	return frac(sin(n)*43758.5453);
}

float noise1(float3 x)
{
	float3 p = floor(x);
	float3 f = frac(x);
	f = f * f*(3.0 - 2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;
	return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
		lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
		lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
			lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
}

struct Boid
{
	float3 position;
	float3 direction;
	float noise_offset;
	float speed;
	float frame;
	float next_frame;
	float frame_interpolation;
	float size;
};

struct Affector
{
	float3 position;
	float force;
	float distance;
	uint axis;
	float2 padding;
};

RWStructuredBuffer<Boid> boidBuffer;
RWStructuredBuffer<Affector> affectorBuffer;

CBUFFER_START(Params)
float DeltaTime;
float RotationSpeed;
float BoidSpeed;
float BoidSpeedVariation;
float3 FlockPosition;
float NeighbourDistance;
uint BoidsCount;
float BoidFrameSpeed;
int NbFrames;
uint NbAffectors;
float AffectorForce;
float AffectorDistance;
uint StepBoidCheckNeighbours;
float MaxAffectorFullAxisSize;
float Temperature;
CBUFFER_END

float3 CalculateAffectorInfluence(Affector affector, float3 boid_pos, float3 flock_position, float max_affector_full_axis_size, float affector_distance)
{
	float3 diff = float3(0, 0.0, 0);
	float3 affector_relative_position = flock_position - affector.position;

	if (affector.axis == 3)
	{
		if (distance(boid_pos, affector_relative_position) < affector.distance + affector_distance)
		{
			diff = boid_pos - affector_relative_position;
		}
	}
	else
	{
		uint first_axis_check = (affector.axis + 1) % 3;
		uint second_axis_check = (affector.axis + 2) % 3;
		float2 boid_pos_check = float2(boid_pos[first_axis_check], boid_pos[second_axis_check]);
		float2 affector_pos_check = float2(affector_relative_position[first_axis_check], affector_relative_position[second_axis_check]);

		if (abs(boid_pos[affector.axis] - flock_position[affector.axis]) < max_affector_full_axis_size &&
			distance(boid_pos_check, affector_pos_check) < (affector.distance + affector_distance))
		{
			diff = boid_pos - float3(boid_pos[affector.axis], affector_relative_position[first_axis_check], affector_relative_position[second_axis_check]);
		}
	}

	return diff;
}

groupshared uint totalBoids;
groupshared uint3 sumPosition;
groupshared uint sumVelocity;
groupshared uint sumOrder;

RWStructuredBuffer<uint3> outputSumPosition;
RWStructuredBuffer<uint> outputSumVelocity;
RWStructuredBuffer<uint> outputSumOrder;
RWStructuredBuffer<uint> outputTotalBoids;

uint FloatToUint(float value)
{
	return (uint)(value * SCALE_FACTOR);
}

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint threadId = gtid.x;
	uint instanceId = id.x;

	// Initialize shared memory
	if (threadId == 0)
	{
		totalBoids = 0;
		sumPosition = uint3(0, 0, 0);
		sumVelocity = 0;
		sumOrder = 0;
	}
	GroupMemoryBarrierWithGroupSync();

	if (instanceId < BoidsCount)
	{
		Boid boid = boidBuffer[instanceId];

		float noise = clamp(noise1(_Time / 100.0 + boid.noise_offset), -1, 1) * 2.0 - 1.0;
		float velocity = BoidSpeed * (1.0 + noise * BoidSpeedVariation) * Temperature;

		float distance_from_flock = distance(boid.position, FlockPosition);
		if (distance_from_flock > MAX_FLOCK_DISTANCE)
			velocity += distance_from_flock / MAX_FLOCK_DISTANCE;
		velocity += min(max(distance(boid.position, FlockPosition) / MAX_FLOCK_DISTANCE, 1), BoidSpeed * VELOCITY_MULTIPLIER);

		float3 boid_pos = boid.position;
		float3 boid_dir = boid.direction;

		float3 separation = float3(0, 0.0, 0);
		float3 alignment = float3(0.0, 0.0, 0.0);
		float3 cohesion = FlockPosition;

		uint nearbyCount = 1;
		for (uint i = 0; i < BoidsCount; i++)
		{
			if (i == instanceId)
				continue;

			if (distance(boid_pos, boidBuffer[i].position) < NeighbourDistance)
			{
				float3 tempBoid_position = boidBuffer[i].position;

				float3 diff = boid_pos - tempBoid_position;
				float diffLen = length(diff);
				float scaler = clamp(1.0 - diffLen / NeighbourDistance, 0.0, 1.0);

				separation += diff * (scaler / diffLen);
				alignment += boidBuffer[i].direction;
				cohesion += tempBoid_position;

				nearbyCount += 1;
			}
		}

		for (i = 0; i < NbAffectors; i++)
		{
			Affector affector = affectorBuffer[i];
			float3 diff = CalculateAffectorInfluence(affector, boid_pos, FlockPosition, MaxAffectorFullAxisSize, AffectorDistance);

			if (length(diff) > 0)
			{
				float affector_force = affector.force + AffectorForce;
				float diffLen = length(diff);
				float scaler = clamp(1.0 - diffLen / affector_force, 0.0, 1.0);

				separation += diff * (scaler / diffLen) * (affector_force < 0 ? affector_force : 1);
			}
		}

		float avg = 1.0 / nearbyCount;
		alignment *= avg;
		cohesion = normalize((cohesion * avg) - boid_pos);

		float3 direction = alignment + separation + cohesion;

		float ip = exp(-RotationSpeed * DeltaTime);
		boid.direction = lerp(direction, normalize(boid_dir), ip);

		boid.position += boid.direction * (velocity * DeltaTime);

		float current_frame = boid.frame + min(velocity, MAX_VELOCITY_ANIMATION_SPEED) * (DeltaTime * BoidFrameSpeed);
		int current_frame_floor = trunc(current_frame);
		boid.frame = current_frame;
		boid.next_frame = current_frame_floor + 1;
		boid.frame_interpolation = current_frame - current_frame_floor;
		if (current_frame_floor >= NbFrames)
		{
			boid.frame = 0;
			boid.next_frame = 1;
		}
		else if (current_frame_floor >= NbFrames - 1)
			boid.next_frame = 0;

		boidBuffer[instanceId] = boid;

		// Accumulate metrics
		InterlockedAdd(totalBoids, 1);
		InterlockedAdd(sumPosition.x, FloatToUint(boid.position.x));
		InterlockedAdd(sumPosition.y, FloatToUint(boid.position.y));
		InterlockedAdd(sumPosition.z, FloatToUint(boid.position.z));
		InterlockedAdd(sumVelocity, FloatToUint(velocity));
		InterlockedAdd(sumOrder, FloatToUint(dot(boid.direction, boid.direction)));
	}

	GroupMemoryBarrierWithGroupSync();

	// Output sums and total boids count
	if (threadId == 0)
	{
		InterlockedAdd(outputSumPosition[0].x, sumPosition.x);
		InterlockedAdd(outputSumPosition[0].y, sumPosition.y);
		InterlockedAdd(outputSumPosition[0].z, sumPosition.z);
		InterlockedAdd(outputSumVelocity[0], sumVelocity);
		InterlockedAdd(outputSumOrder[0], sumOrder);
		InterlockedAdd(outputTotalBoids[0], totalBoids);
	}
}